Notes

* Feature importance X
* L0 model metrics X
* Additional Z score feature engineering X
* Add deciles for the PCA X
* Add more cross sectional features X


* Changing targets 
* Meta model probability ranges X
* Add the Hudson Bay code Fractional Differentiation X
* Additional (L1, L2) layers


* Add runtime to model output
* Test different lag horizons
* Update the model to accommodate different target logic


This is the actual paper backtest
https://console.cloud.google.com/vertex-ai/colab/notebooks?inv=1&invt=AbwqdQ&project=issachar-feature-library&activeNb=projects%2Fissachar-feature-library%2Flocations%2Fus-east4%2Frepositories%2F8d052d55-544b-4732-86f0-dd0d12f741e4
https://console.cloud.google.com/vertex-ai/colab/notebooks?inv=1&invt=AbwqdQ&project=issachar-feature-library&activeNb=projects%2Fissachar-feature-library%2Flocations%2Fus-east4%2Frepositories%2F29d46d5d-21c3-4731-aa0b-2a766ebebb1f

# EOD Note

We see better performance from standard neutral zone than the custom distribution (Total, rolling 5)
We see essentially the same performance at a 3 day rolling compared to a 5 day rolling (Total)
Adjusting allocation logic does increase performance 
Model testing indicate using all features outperforms a feature subset 
SHAP analysis raises no flags for leakage


Recommended trial logic for 


rolling_window=5


XGBoost__2025-05-14 11:22:31.891394__model=Meta_Model__rolling_train_length=2100__rolling_test_length=21__n_k=8__holdout_start=2022-01-01__batch_size=512__learning_rate=0.0008__optuna_runs=50__random_seed=42__gcs_bucket=test_model_plots__include_fundamentals=0__include_will_features=0__notes=no notes__epochs=3000__addition_technical=0__additional_factors=2__act_func=swish__table_suffix=V003_testing__use_correlations=0__will_portfolios=0__calculate_shap=1__calculate_ww=1__clamp_gradients=1__c...

TeamMosiac#

Re-run the shap analysis for only index of 1 day

Accuracy metrics
1 day
Long - Short
350 features
No Will features
